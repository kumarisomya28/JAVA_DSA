Q1) Print numbers from n to 1(Decreasing order).

      public static void printDec(int n){
        if(n==1) {
            System.out.println(n);
            return;
        }
        System.out.print(n+ " ");
        printDec(n-1);
    }
    public static void main(String[] args) {
        int n=10;
        printDec(n);
}
  

Q2) Print number in increasing order (1 to n).

 public static void printinc(int n){
        if(n==1){
            System.out.print(n+" ");
            return;
        }
       printinc(n-1);
        System.out.print(n+" ");
    }
     public static void main(String[] args) {
       int n = 10;
       printinc(n);
    }

Q3) Print factorial of a number n.

    public static int fact(int n){
        if(n ==0){
            return 1;
        }
        int fnm1 =fact(n-1);
        int fn= n* fact(n-1);
        return fn;
    }
    public static void main(String[] args) {
        int n=5;
        System.out.println(fact(n));

    }

Q4) Print sum of first n natural numbers.

 public static int calcSum(int n){
        if( n==1 ){
            return 1;
        }
        int snm1 = calcSum(n-1);
        int sn = n + snm1;
        return sn;
    }

   public static void main(String[] args) {
        int n=26;
        System.out.println(calcSum(n));

    }

Q5) print Nth fibonacci number .

   public static int fib(int n){
        if (n==0 || n== 1){
            return n;
        }
        int f1 = fib(n-1);
        int f2 = fib(n-2);
        int fn = fib(n-1)+fib(n-2);
        return fn;
    }
     public static void main(String[] args) {
       int n = 10;
        System.out.println(fib(n));

    }


Q6) Check if the array is sorted or not.


 public static boolean isSorted(int arr[], int i){
       if(i ==arr.length-1){
           return true;
       }
       if(arr[i] > arr[i+1]){
           return false;
       }
       return isSorted(arr,i+1);
   }
  public static void main(String[] args) {
      int arr[]= {1,2,3, 7,4,5};
        System.out.println(isSorted(arr, 0));


    }

Q7) Write  a function to find the first occurence of an element in a array.

      public static int firstOccurence(int arr[],int key, int i){
            if(i== arr.length){
               return -1;
           }
           if(arr[i]==key){
               return i;
           }
           return firstOccurance(arr, key,i+1);
       }
    public static void main(String[] args) {
      int arr[]= {1,2,4, 7,4,5};
      int key = 4;
        System.out.println(firstOccurance(arr,key,0));
    }

Q8)  Write  a function to find the last occurence of an element in a array.

  public static int lastOccurence(int arr[], int key, int i) {
        if(i == arr.length){
            return -1;
        }

    int isFound = lastOccurence(arr,key,i+1);
    if(isFound == -1 && arr[i] == key){
        return i;
    }
        return isFound;
    }

    public static void main (String[]args){
            int arr[] = {8, 3, 6, 9, 5, 10, 2, 5, 3};
            System.out.println(lastOccurence(arr, 5, 0));

        }

Q9)Print xto the power n. (Brute Force)

 public static int power(int x, int n){
          //base case
          if(n==0){
              return 1;
          }
          int xnm1 = power(x,n-1);
          int xn = x * xnm1;
          return xn;
      }
    public static void main(String[] args) {
        System.out.println(power(2,10 ));
    }




Q10) Binary Search using recursion.

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 55, 66, 78};
        int target = 78;
        System.out.println(search(arr, target, 0, arr.length - 1));
    }

    static int search(int[] arr, int target, int s, int e) {
        if (s > e) {
            return -1;
        }
        int m = s + (e - s) / 2;
        if (arr[m] == target) {
            return m;
        }
        if (target < arr[m]) {
            return search(arr, target, s, m - 1);
        }
        return search(arr, target, m + 1, e);
    }
