Q1).Print an array in which inputs are taken from users and also print the percentage of all the inputs.
 public static void main(String[] args) {
        int marks[] = new int[3];
        Scanner Sc = new Scanner(System.in);
        marks[0] = Sc.nextInt();
        marks[1] = Sc.nextInt();
        marks[2] = Sc.nextInt();
        for (int i = 0; i < marks.length; i++) {
            System.out.print(marks[i]+" ");
        }
            int percentage = (marks[0] + marks[1] + marks[2]) / 3;
            System.out.println("percentage =" + percentage + "%");
        }

Q2).Passing arrays as arguments.
    public static void main(String[] args) {
        int marks[]={98,97,99};
        update(marks);
        for(int i=0;i<marks.length;i++){
            System.out.print(marks[i]+" ");
        }
        System.out.println();



    }
public static void update(int marks[]){
    for(int i=0;i<marks.length;i++){
        marks[i]=marks[i]+1;
    }
}

Q3).Example of java array,where declare,instantiate,initialize and traverse an array.
  public static void main(String[] args) {
        int a[] = new int[5];//declaration and instantiation
        a[0] = 10;//initialization
        a[1] = 20;
        a[2] = 70;
        a[3] = 40;
        a[4] = 50;
        //traversing array
        for (int i = 0; i < a.length; i++) {  //length is the property of array
            System.out.println(a[i]);


        }

    }
Q4). write the code to find a key in the given array of int. type.
   public static int linearSearch(int number[], int key) {
        for (int i = 0; i < number.length; i++) {
            if (number[i] == key) {
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
      int number[] = {2, 4, 6, 8, 10, 12, 14, 16};
        int key = 10;
        int index = linearSearch(number, key);
        if (index == -1) {
            System.out.println("NOT found");
        } else {
            System.out.println("key is at index :" + index);
        }
    }
Q5).Find the largest and smallest value in an int. type of arrays.
    public static int getLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        int smallest=Integer.MAX_VALUE;
        for (int i = 0; i < numbers.length; i++) {
            if (largest < numbers[i]) {
                largest = numbers[i];
            }
            if(smallest>numbers[i]){
                smallest=numbers[i];
            }
        }
        System.out.println("smallest value is: "+smallest);
        return largest;
    }


    public static void main(String[] args) {
        int numbers[] = {1, 2, 6, 3, 5};
        System.out.println("largest value is: "+getLargest(numbers) );
    }
   
Q6).Find the key for int. type array using binary search.
  public static int binarySearch(int numbers[],int key){
        int start=0,end=numbers.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(numbers[mid]==key){
                return mid;
            }
            if(numbers[mid]<key) {
                start = mid + 1;
            }else{
                end=mid-1;
            }
        }
        return -1;
    }




    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10,12,14};
        int key=8;
        System.out.println("index for key is:"+binarySearch(numbers,key));
    }
Q7).Reverse an  int. type of Array.
    public static void reverse(int numbers[]){
        int first=0,last=numbers.length-1;
        while(first<last){
            int temp=numbers[last];
            numbers[last]=numbers[first];
            numbers[first]=temp;

            first++;
            last--;
        }
    }


    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        reverse(numbers);
        for(int i=0;i<numbers.length;i++){
            System.out.print(numbers[i]+" ");
        }
        System.out.println();
    }
Q8).Print pairs in int.type of arrays and also calculate the total numbers of pairs.
   public static void printPairs(int numbers[]){
    int tp=0;
        for(int i=0;i<numbers.length;i++){
            int current=numbers[i];
            for(int j=i+1;j<numbers.length;j++){
                System.out.print("("+current+","+numbers[j]+")");
              tp++;
            }
            System.out.println();
        }
       System.out.println("total pairs: "+tp);
   }

    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        printPairs(numbers);
    }


Q9).Print subarrays of int. type of array and also calculate the total subarrays.
public static void printSubarrays(int numbers[]){
     int ts=0;
    for(int i=0;i<numbers.length;i++){
        int start=i;
        for(int j=i;j<numbers.length;j++){
            int end=j;
            for(int k=start;k<=end;k++){
                System.out.print(numbers[k]+"  ");

            }
            ts++;
            System.out.println();
        }
        System.out.println();
    }
    System.out.println("total subarrays ="+ts);
}
      public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        printSubarrays(numbers);
    }

 Q10).print the maximum subarrays sum.
       public static void maxSubarraySum(int numbers[]){
       int currSum=0;
      int maxSum=Integer.MIN_VALUE;
       for(int i=0;i<numbers.length;i++){
        int start=i;
        for(int j=i;j<numbers.length;j++){
            int end=j;
            currSum=0;
            for(int k=start;k<=end;k++){
               currSum+= numbers[k];

            }
            System.out.println(currSum);
            if(maxSum<currSum){
                maxSum=currSum;
            }
        }
    }
    System.out.println("max sum ="+ maxSum);

}

    public static void main(String[] args) {
        int numbers[]={1,-2,6,-1,3};
        maxSubarraySum( numbers);
    }
   
