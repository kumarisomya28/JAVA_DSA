Q1).Print an array in which inputs are taken from users and also print the percentage of all the inputs.
 public static void main(String[] args) {
        int marks[] = new int[3];
        Scanner Sc = new Scanner(System.in);
        marks[0] = Sc.nextInt();
        marks[1] = Sc.nextInt();
        marks[2] = Sc.nextInt();
        for (int i = 0; i < marks.length; i++) {
            System.out.print(marks[i]+" ");
        }
            int percentage = (marks[0] + marks[1] + marks[2]) / 3;
            System.out.println("percentage =" + percentage + "%");
        }

Q2).Passing arrays as arguments.
    public static void main(String[] args) {
        int marks[]={98,97,99};
        update(marks);
        for(int i=0;i<marks.length;i++){
            System.out.print(marks[i]+" ");
        }
        System.out.println();



    }
public static void update(int marks[]){
    for(int i=0;i<marks.length;i++){
        marks[i]=marks[i]+1;
    }
}

Q3).Example of java array,where declare,instantiate,initialize and traverse an array.
  public static void main(String[] args) {
        int a[] = new int[5];//declaration and instantiation
        a[0] = 10;//initialization
        a[1] = 20;
        a[2] = 70;
        a[3] = 40;
        a[4] = 50;
        //traversing array
        for (int i = 0; i < a.length; i++) {  //length is the property of array
            System.out.println(a[i]);


        }

    }
Q4). write the code to find a key in the given array of int. type.
   public static int linearSearch(int number[], int key) {
        for (int i = 0; i < number.length; i++) {
            if (number[i] == key) {
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
      int number[] = {2, 4, 6, 8, 10, 12, 14, 16};
        int key = 10;
        int index = linearSearch(number, key);
        if (index == -1) {
            System.out.println("NOT found");
        } else {
            System.out.println("key is at index :" + index);
        }
    }
Q5).Find the largest and smallest value in an int. type of arrays.
    public static int getLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        int smallest=Integer.MAX_VALUE;
        for (int i = 0; i < numbers.length; i++) {
            if (largest < numbers[i]) {
                largest = numbers[i];
            }
            if(smallest>numbers[i]){
                smallest=numbers[i];
            }
        }
        System.out.println("smallest value is: "+smallest);
        return largest;
    }


    public static void main(String[] args) {
        int numbers[] = {1, 2, 6, 3, 5};
        System.out.println("largest value is: "+getLargest(numbers) );
    }
   
Q6).Find the key for int. type array using binary search.
  public static int binarySearch(int numbers[],int key){
        int start=0,end=numbers.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(numbers[mid]==key){
                return mid;
            }
            if(numbers[mid]<key) {
                start = mid + 1;
            }else{
                end=mid-1;
            }
        }
        return -1;
    }




    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10,12,14};
        int key=8;
        System.out.println("index for key is:"+binarySearch(numbers,key));
    }
Q7).Reverse an  int. type of Array.
    public static void reverse(int numbers[]){
        int first=0,last=numbers.length-1;
        while(first<last){
            int temp=numbers[last];
            numbers[last]=numbers[first];
            numbers[first]=temp;

            first++;
            last--;
        }
    }


    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        reverse(numbers);
        for(int i=0;i<numbers.length;i++){
            System.out.print(numbers[i]+" ");
        }
        System.out.println();
    }
Q8).Print pairs in int.type of arrays and also calculate the total numbers of pairs.
   public static void printPairs(int numbers[]){
    int tp=0;
        for(int i=0;i<numbers.length;i++){
            int current=numbers[i];
            for(int j=i+1;j<numbers.length;j++){
                System.out.print("("+current+","+numbers[j]+")");
              tp++;
            }
            System.out.println();
        }
       System.out.println("total pairs: "+tp);
   }

    public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        printPairs(numbers);
    }


Q9).Print subarrays of int. type of array and also calculate the total subarrays.
public static void printSubarrays(int numbers[]){
     int ts=0;
    for(int i=0;i<numbers.length;i++){
        int start=i;
        for(int j=i;j<numbers.length;j++){
            int end=j;
            for(int k=start;k<=end;k++){
                System.out.print(numbers[k]+"  ");

            }
            ts++;
            System.out.println();
        }
        System.out.println();
    }
    System.out.println("total subarrays ="+ts);
}
      public static void main(String[] args) {
        int numbers[]={2,4,6,8,10};
        printSubarrays(numbers);
    }

 Q10).print the maximum subarrays sum.
       public static void maxSubarraySum(int numbers[]){
       int currSum=0;
      int maxSum=Integer.MIN_VALUE;
       for(int i=0;i<numbers.length;i++){
        int start=i;
        for(int j=i;j<numbers.length;j++){
            int end=j;
            currSum=0;
            for(int k=start;k<=end;k++){
               currSum+= numbers[k];

            }
            System.out.println(currSum);
            if(maxSum<currSum){
                maxSum=currSum;
            }
        }
    }
    System.out.println("max sum ="+ maxSum);

}

    public static void main(String[] args) {
        int numbers[]={1,-2,6,-1,3};
        maxSubarraySum( numbers);
    }

Q11).Print the maximum sum of subarraysum using prefix array. 
public static void maxSubarraySum(int numbers[]) {
        int currSum = 0;
        int maxSum = Integer.MIN_VALUE;
        int prefix[] = new int[numbers.length];
        prefix[0] = numbers[0];
        for (int i = 1; i < prefix.length; i++) {
            prefix[i] = prefix[i - 1] + numbers[i];
        }
        for (int i = 0; i < numbers.length; i++) {
            int start = i;
            for (int j = i; j < numbers.length; j++) {
                int end = j;
                currSum = start == 0 ? prefix[end] : prefix[end] - prefix[start - 1];
                if (maxSum < currSum) {
                    maxSum = currSum;
                }
            }
        }
        System.out.print("max sum = " + maxSum);
    }

    public static void main(String[] args) {
        int numbers[] = {1, -2, 6, -1, 3};
        maxSubarraySum(numbers);
}

Q12).print maximum subarray sum using KADANE's algorithm.
    public static void kadanes(int numbers[]){
      int ms = Integer.MIN_VALUE;
      int cs=0;
      for(int i=0;i<numbers.length;i++){
          cs=cs+ numbers[i];
          if(cs<0){
            cs=0;

          }
          ms=Math.max(cs,ms);
      }
        System.out.println("our max subarray sum is :"+ ms);
    }

    public static void main(String[] args) {
        int numbers[]={-2,-3,4,-1,-2,1,5,-3};
        kadanes(numbers);
    }

Q13).Trapped Rainwater.
    public static int trappedRainWater(int height[]) {
        int n = height.length;
        //calculate left max boundary-array
        int leftMax[] = new int[n];
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(height[i], leftMax[i - 1]);
        }
        //calculate right max boundary-array
        int rightMax[] = new int[n];
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(height[i], rightMax[i + 1]);

        }
        int trappedWater = 0;
        //loop
        for (int i = 0; i < n; i++) {

            //waterlevel=min(leftmax bound, rightmax bound)
            int waterLevel = Math.min(leftMax[i], rightMax[i]);
            //trapped water= waterLevel- height[i]
            trappedWater +=waterLevel - height[i];
    }
   return trappedWater;
}
    public static void main(String[] args) {
        int height[]= {4,2,0,6,3,2,5};
        System.out.println(trappedRainWater(height));
    }

Q14).Buy and Sell stock prices.
    public static int buyAndSellStock(int prices[]) {
        int buyPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (buyPrice < prices[i]) { //profit
                int profit = prices[i] - buyPrice;  //todays profit
                maxProfit = Math.max(maxProfit, profit);
            }else{
                buyPrice=prices[i];
            }
        }
        return maxProfit;
    }


    public static void main(String[] args) {
        int prices[] = {7, 1, 5, 3, 6, 4};
        System.out.println(buyAndSellStock(prices));
    }


Q15).Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
      public static boolean ContainsDuplicate(int[] nums) {
          for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int nums[] = {1,1,1,3,3,4,3,2,4,2};
        System.out.println(ContainsDuplicate(nums));
    }


Q16).You are given an array prices where prices[i] is the price of a given stock on the ith day.
            Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
    
    public static int maxProfit(int[]prices){
     int buy=prices[0];
         int profit=0;
       for(int i=1;i<prices.length;i++){
        if (buy < prices[i]){
            profit=Math.max(prices[i]-buy,profit);

        }else{
            buy=prices[i];
        }
    }
    return profit;
}

    public static void main(String[] args) {
       int prices[]={7,1,5,3,6,4};
        System.out.println(maxProfit(prices));
    }


Q17).Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

 
