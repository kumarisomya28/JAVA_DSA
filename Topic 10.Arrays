Q1).Print an array in which inputs are taken from users and also print the percentage of all the inputs.
 public static void main(String[] args) {
        int marks[] = new int[3];
        Scanner Sc = new Scanner(System.in);
        marks[0] = Sc.nextInt();
        marks[1] = Sc.nextInt();
        marks[2] = Sc.nextInt();
        for (int i = 0; i < marks.length; i++) {
            System.out.print(marks[i]+" ");
        }
            int percentage = (marks[0] + marks[1] + marks[2]) / 3;
            System.out.println("percentage =" + percentage + "%");
        }

Q2).Passing arrays as arguments.
    public static void main(String[] args) {
        int marks[]={98,97,99};
        update(marks);
        for(int i=0;i<marks.length;i++){
            System.out.print(marks[i]+" ");
        }
        System.out.println();



    }
public static void update(int marks[]){
    for(int i=0;i<marks.length;i++){
        marks[i]=marks[i]+1;
    }
}

Q3).Example of java array,where declare,instantiate,initialize and traverse an array.
  public static void main(String[] args) {
        int a[] = new int[5];//declaration and instantiation
        a[0] = 10;//initialization
        a[1] = 20;
        a[2] = 70;
        a[3] = 40;
        a[4] = 50;
        //traversing array
        for (int i = 0; i < a.length; i++) {  //length is the property of array
            System.out.println(a[i]);


        }

    }
Q4). write the code to find a key in the given array of int type.
   public static int linearSearch(int number[], int key) {
        for (int i = 0; i < number.length; i++) {
            if (number[i] == key) {
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
      int number[] = {2, 4, 6, 8, 10, 12, 14, 16};
        int key = 10;
        int index = linearSearch(number, key);
        if (index == -1) {
            System.out.println("NOT found");
        } else {
            System.out.println("key is at index :" + index);
        }
    }
Q5).Find the largest and smallest value in an int type of arrays.
    public static int getLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        int smallest=Integer.MAX_VALUE;
        for (int i = 0; i < numbers.length; i++) {
            if (largest < numbers[i]) {
                largest = numbers[i];
            }
            if(smallest>numbers[i]){
                smallest=numbers[i];
            }
        }
        System.out.println("smallest value is: "+smallest);
        return largest;
    }


    public static void main(String[] args) {
        int numbers[] = {1, 2, 6, 3, 5};
        System.out.println("largest value is: "+getLargest(numbers) );
    }
   
