Q1) Check if a number is odd or even?
     public static void oddOrEven(int n){
        int bitMask=1;
        if((n & bitMask)==0){
            System.out.println("even number");

        }else{
            System.out.println("odd number");
        }
    }

    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);

    }

Q2) Get i'th Bit.
    public static int getIthBit(int n, int i){
        int bitMask =1<<i;
        if((n & bitMask)== 0){
            return 0;
        }else{
            return 1;
        }
    }

    public static void main(String[] args) {
        System.out.println(getIthBit(10,3));
    }

Q3) Set i'th Bit.
   public static int setIthBit(int n, int i){
        int bitMask= 1<<i;
        return n| bitMask;
    }

    public static void main(String[] args) {
        System.out.println(setIthBit(10,2));
    }

Q4) Clear ith Bit.
   public static int clearIthbit(int n,int i){
        int bitMask =~(1<<i);
        return n & bitMask;
    }

        public static void main(String[] args) {
        System.out.println(clearIthbit(10,1));
    }

Q5) You have a 32-bit unsigned integer called 'num' and another integer called 'i'.
    You need to perform the following operations on the 'num' integer based on the value of 'i':
   1. Get the bit value at the "i"th position of "num".
  2. Set the bit at the "i"th position of "num".
  3. Clear the bit at the "i"th position of "num".

 public static int[] bitManipulation(int num, int i) {
        int[] result = new int[3];
     result[0] = (num & (1 << (i - 1))) == 0 ? 0 : 1;
      result[1] = num | (1 << (i - 1));
      result[2] = num & ~(1 << (i - 1));
       
        return result;
    }
     public static void performBitManipulation(int num, int i) {
        int[] result = bitManipulation(num, i);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
    }

Q6) Given a number ‘N’ and a number ‘K’. Return true if ‘K’th bit of number is set, else return false.

    static boolean isKthBitSet(int n, int k) {
       return ((n >> (k - 1)) & 1) == 1;
    }

Q7) You are given an integer 'N'.Return 'odd' if the given number 'N' is odd, else return 'even'.
    
    public static String oddEven(int N){
         return (N % 2 == 0) ? "even" : "odd";
    }

