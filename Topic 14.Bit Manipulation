Q1) Check if a number is odd or even?
     public static void oddOrEven(int n){
        int bitMask=1;
        if((n & bitMask)==0){
            System.out.println("even number");

        }else{
            System.out.println("odd number");
        }
    }

    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);

    }

Q2) Get i'th Bit.
    public static int getIthBit(int n, int i){
        int bitMask =1<<i;
        if((n & bitMask)== 0){
            return 0;
        }else{
            return 1;
        }
    }

    public static void main(String[] args) {
        System.out.println(getIthBit(10,3));
    }

Q3) Set i'th Bit.
   public static int setIthBit(int n, int i){
        int bitMask= 1<<i;
        return n| bitMask;
    }

    public static void main(String[] args) {
        System.out.println(setIthBit(10,2));
    }

Q4) Clear ith Bit.
   public static int clearIthbit(int n,int i){
        int bitMask =~(1<<i);
        return n & bitMask;
    }

        public static void main(String[] args) {
        System.out.println(clearIthbit(10,1));
    }

Q5) You have a 32-bit unsigned integer called 'num' and another integer called 'i'.
    You need to perform the following operations on the 'num' integer based on the value of 'i':
   1. Get the bit value at the "i"th position of "num".
  2. Set the bit at the "i"th position of "num".
  3. Clear the bit at the "i"th position of "num".

 public static int[] bitManipulation(int num, int i) {
        int[] result = new int[3];
     result[0] = (num & (1 << (i - 1))) == 0 ? 0 : 1;
      result[1] = num | (1 << (i - 1));
      result[2] = num & ~(1 << (i - 1));
       
        return result;
    }
     public static void performBitManipulation(int num, int i) {
        int[] result = bitManipulation(num, i);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
    }

Q6) Given a number ‘N’ and a number ‘K’. Return true if ‘K’th bit of number is set, else return false.

    static boolean isKthBitSet(int n, int k) {
       return ((n >> (k - 1)) & 1) == 1;
    }


Q7) You are given an integer 'N'.Return 'odd' if the given number 'N' is odd, else return 'even'.
    
    public static String oddEven(int N){
         return (N % 2 == 0) ? "even" : "odd";
    }


Q8) You have been given an integer 'N'.Your task is to return true if it is a power of two. Otherwise, return false.
        An integer 'N' is a power of two, if it can be expressed as 2 ^ 'K' where 'K' is an integer.
   
      public static boolean isPowerOfTwo(int n) {
         return n > 0 && (n & (n - 1)) == 0;
    }

Q9) For a given integer 'N', you have to return the number of set bits in the binary representation of the numbers from 1 to 'N'.
     In a binary number '1' is considered as a set bit and '0' as not set.
 
  public static int countSetBits(int n) {
      int count = 0;
    for (int i = 1; i <= n; i++) {
     count += countSetBitsInRange(i);
        }return count;
    }
  static int countSetBitsInRange(int num) {
        int count = 0;
    while (num > 0) {
   count += num & 1;
     num >>= 1;
        } return count;
    }

Q10) The problem is to find the rightmost bit of a non-negative number 'N' that is currently unset (i.e., has a value of 0) in its binary representation and set it to 1.
   Return the number after setting the rightmost unset bit of 'N'. If there are no unset bits in N's binary representation, then the number should remain unchanged.

 public static int setBits(int N){
       if (N == 0) {
            return 1;
        }

        int mask = 1;
        while ((N & mask) != 0) {
            mask <<= 1;
        }

        if (mask > N) {
            return N;  // No unset bit, return unchanged number
        }

        return N | mask;
    }

Q11) Clear last ith bits.
       public static int clearIthbits(int n,int i){
        int bitmask=(~0)<<i;
        return n & bitmask;
    }

    public static void main(String[] args) {
        System.out.println(clearIthbits(15,2));
    }

Q12) Clear Range of bits.
    public static int clearIthBits(int n,int i,int j){
        int a=((~0)<<(j+1));
        int b=(1<<i)-1;
        int bitmask=a|b;
        return n & bitmask;
    }

    public static void main(String[] args) {
        System.out.println(clearIthBits(10,2,4));
    }

Q13) Check if a number is power of 2 or not.
    public static boolean isPoweroftwo(int n){
    return (n &(n-1))==0;
     }

      public static void main(String[] args) {
        System.out.println(isPoweroftwo(8));
         }

Q14) Count set bits in a number.
    public static int CountSetBits(int n){
       int count =0;
        while(n>0){
          if((n&1)!=0){
              count++;
         }
         n=n>>1;
     }
      return count;
}

    public static void main(String[] args) {
        System.out.println(CountSetBits(10));
    }

Q15) Fast Exponentiation.
     public static int FastExpo(int a,int n){
        int ans=1;
        while(n>0){
            if((n&1)!=0){
                ans=ans*a;
            }
            a=a*a;
            n=n>>1;
        }
        return ans;
    }

    public static void main(String[] args) {
        System.out.println(FastExpo(3,5));
    }

Q16) Modular Exponential.
   static int powe(int x,int y,int p){
        int res=1;
        while(y>0){
            if((y&1)!=0)
                res=res*x;
            y=y>>1;
            x=x*x;
        }
        return res%p;
    }

    public static void main(String[] args) {
        int x=2;
        int y=5;
        int p=13;
        int mod=powe(x,y,p);
        System.out.println("power is "+mod);
    }

Q17) What is the value of x^x for any value of x?
    public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    System.out.println("Enter the value of x: ");
    double x=sc.nextDouble();
    double result=Math.pow(x,x);
    System.out.println("The value of "+x+"^"+x+"is"+result);
    sc.close();
}

Q18) Swap two numbers without using any third variable.
    public static void main(String[] args) {
    int a=5;
    int b=10;
    System.out.println("Before swapping :a= "+a+",b= "+b);
    a=a^b;
    b=a^b;
    a=a^b;
    System.out.println("After swapping := "+a+",b= "+b);
}

Q19) Add 1 to an integer using Bit manipulation.
     public static void main(String[] args) {
        int x = 6;
        System.out.println(x + " + " + 1 + " is " + -~x);
        x = -4;
        System.out.println(x + " + " + 1 + " is " + -~x);
        x = 0;
        System.out.println(x + " + " + 1 + " is " + -~x);
    }

Q20) Convert uppercase characters to lowercase using bits.
  public static void main(String[] args) {

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        System.out.println((char)(ch | ' '));
   }
    }
