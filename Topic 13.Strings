Q1) Take a input string from user and print it .
  
     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String name = sc.next(); //this function is used only for a single word it doesn't contain the word after space
        System.out.println(name);
    }


Q2)Take a input string(two words or a line) from user and print it.

     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        System.out.println(name);
    }


Q3)Find the length of the String by using length() function.
   
     public static void main(String[] args) {
        String fullName = "Kumari somya";
        System.out.println(fullName.length());
    }

Q4) Concatenate Strings and print it.
  
   public static void main(String[] args) {
        String firstName = "kumari";
        String lastName = "Somya";
        String fullName = firstName+" "+lastName;
        System.out.println(fullName);
    }

Q5) print the each character of the string by using charAt.

      public static void Printletters(String str) {
        for (int i=0; i<str.length();i++){
            System.out.print(str.charAt(i)+" ");
        }
        System.out.println();
    }


    public static void main(String[] args) {
        String firstName = "kumari";
        String lastName = "Somya";
        String fullName = firstName+" "+lastName;

        Printletters(fullName);
    }

Q6) Check if a String is a Palindrome.

    public static boolean isPalindrome(String str){
    for(int i=0;i<str.length()/2; i++){
        int n=str.length();
        if(str.charAt(i)!=str.charAt(n-1-i)){
          return false;
        }
    }
    return true;
   }

    public static void main(String[] args) {
        String str= "racecar";
        System.out.println(isPalindrome(str));
    }

Q7) Given a route containing 4 directions (E,W,N,S),find the shortest path to reach destination.
  
      public static float getShortestPath(String path) {
        int x = 0, y = 0;
        for (int i = 0; i < path.length(); i++) {
            char dir = path.charAt(i);
            //South
            if (dir == 'S') {
                y--;
            }
            //North
            else if (dir == 'N') {
                y++;
            }
            //West
            else if (dir == 'W') {
                x--;
            } else {
                x++;
            }
        }
        int x2 = x * x;
        int y2 = y * y;
        return (float) Math.sqrt(x2 + y2);
    }

        public static void main(String args[]) {
       String path ="WNEENESENNN";
            System.out.println(getShortestPath(path));
}

Q8) String Functions for comparison.
  
public static void main(String[] args) {
    String s1="Tony";
    String s2="Tony";
    String s3=new String("Tony");
    if (s1.equals(s3)){
        System.out.println("Strings are equal");
    }else{
        System.out.println("strings are not equal");
    }
}

Q9) print the substring of String "HelloWorld". 

  public static String subString(String str,int si,int ei){
        String substr ="";
        for(int i=si;i<ei;i++){
            substr += str.charAt(i);
        }
        return substr;
    }
  public static void main(String[] args) {
    String str ="HelloWorld";
    System.out.println(subString(str,0,5));
    }

Q10) print the substring using substring property of java.
   
   public static void main(String[] args) {
    String str=new String("Rs 1500");
    System.out.print("The original string is :");
    System.out.println(str);
    System.out.print("The extracted substring is: ");
    System.out.println(str.substring(3));
}

Q11) for a given set of Strings,print the largest String.
        "apple","mango","banana".
   
    public static void main(String[] args) {
        String fruits[] ={"apple" ,"mango", "banana"};

        String largest = fruits[0];
        for(int i=1;i<fruits.length;i++){
           if(largest.compareTo(fruits[i]) < 0){
               largest =fruits[i];

            }
        }
        System.out.println(largest);
    }

Q12) print the characters and there length using the StringBuilder property of Strings.
       public static void main(String[] args) {
        StringBuilder sb =new StringBuilder();
          for(char ch='a';ch<='z';ch++){
             sb.append(ch);
    }
      System.out.println(sb);
         System.out.println(sb.length());
    }

Q13) for a given String convert each the first letter of each word to uppercase.
      "hi i am somya".

public static String toUpperCase(String str){
        StringBuilder sb =new StringBuilder("");

        char ch=Character.toUpperCase(str.charAt(0));
        sb.append(ch);

        for(int i=1;i<str.length();i++){
            if (str.charAt(i) == ' ' && i<str.length()-1) {
                sb.append(str.charAt(i));
                i++;
                sb.append(Character.toUpperCase(str.charAt(i)));
            } else{
                sb.append(str.charAt(i));
            }
        }
        return sb.toString();
    }
public static void main(String[] args) {
    String str  ="hi, i am somya";
    System.out.println(toUpperCase(str));
}

Q14) String Compression.
   public static String compress(String str){
        String newStr ="";
        for(int i=0; i<str.length();i++){
            Integer count =1;
            while(i<str.length()-1 && str.charAt(i)== str.charAt(i+1)){
                count++;
                i++;
            }
            newStr +=str.charAt(i);
            if(count >1){
                newStr +=count.toString();
            }

        }
        return newStr;
    }
    public static void main(String[] args) {
        String str ="aaabbcccdd";
        System.out.println(compress(str));
    }

Q15) Print how many times lowercase vowels occured in a String entered by the user.
      public static void main(String[] args) {
            String str = new Scanner(System.in).next();
            int count = 0;
            for(int i=0; i<str.length(); i++) {
                char ch = str.charAt(i);
                if(ch == 'a' || ch == 'e' ||ch == 'i' || ch == 'o' ||ch == 'u') {
                    count++;
                }
            }
            System.out.println("count of vowels is :" + count);
        }

Q16) What will be the output of the following code?
       public class Solution {
        public static void main(String args[]) {
          String str = "ShradhaDidi";
          String str1 = "ApnaCollege";
          String str2 = "ShradhaDidi";
     System.out.println(str.equals(str1) + " " + str.equals(str2));
    }
      }
output:--False True

Q17) What will be the output of the following code?
     public class Solution {
      public static void main(String args[]) {
       String str = "ApnaCollege".replace("l", "");
        System.out.println(str);
        }
        }
output:--ApnaCoege

Q18) Java String intern() method.
    public static void main(String args[]) {
        String s1 = new String("hello");
        String s2 = "hello";
        String s3 = s1.intern();
        System.out.println(s1 == s2);
        System.out.println(s2 == s3);
    }

Q19) Determine if 2 Strings are anagrams of each other.
       public static void main(String[] args) {
            String str1 = "earth";
            String str2 = "heart";
                    str1 = str1.toLowerCase();
                    str2 = str2.toLowerCase();

              if(str1.length() == str2.length()) {
                char[] str1charArray = str1.toCharArray();
                char[] str2charArray = str2.toCharArray();
                Arrays.sort(str1charArray);
                Arrays.sort(str2charArray);
                boolean result = Arrays.equals(str1charArray, str2charArray);
                if(result) {
                    System.out.println(str1 + " and " + str2 + " are anagrams of each other.");
                } else {
                    System.out.println(str1 + " and " + str2 + " are not anagrams of each other.");
                }
            } else {

                System.out.println(str1 + " and " + str2 + " are not anagrams of each other.");
            }
        }

Q20) Find maximum depth of nested parenthesis in a string.
     static int maxDepth(String S) {
        int current_max = 0; // current count 
        int max = 0; // overall maximum count 
        int n = S.length();
 
        // Traverse the input string 
        for (int i = 0; i < n; i++) {
            if (S.charAt(i) == '(') {
                current_max++;
 
                // update max if required 
                if (current_max > max) {
                    max = current_max;
                }
            } else if (S.charAt(i) == ')') {
                if (current_max > 0) {
                    current_max--;
                } else {
                    return -1;
                }
            }
        }
       // finally check for unbalanced string 
        if (current_max != 0) {
            return -1;
        }
 
        return max;
    }
 
    public static void main(String[] args) {
        String s = "( ((X)) (((Y))) )";
        System.out.println(maxDepth(s));
    }

Q21)Reduce string by removing outermost parentheses from each primitive substring.
   
    public static String removeOuterParentheses(String s) {
        int openCount = 0,closeCount = 0, start = 0;

        String result = "";

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                openCount++;
            } else if (c == ')') {
                closeCount++;
            }

            if (openCount == closeCount) {
                result += s.substring(start + 1, i);
                start = i + 1;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        String s1 = "(()())(())()";
        System.out.println(removeOuterParentheses(s1));

    }

Q22) Reverse words in a given String.
    static String result(String s)
    {
        int left = 0;
        int right = s.length() - 1;

        String temp = "";
        String ans = "";

        while (left <= right)
        {
            char ch = s.charAt(left);
            if (ch != ' ')
            {
                temp += ch;
            }
            else if (ch == ' ')
            {
                if (!ans.equals(""))
                {
                    ans = temp + " " + ans;
                }
                else
                {
                    ans = temp;
                }
                temp = "";
            }
            left++;
        }

       
        if (!temp.equals(""))
        {
            if (!ans.equals(""))
            {
                ans = temp + " " + ans;
            }
            else
            {
                ans = temp;
            }
        }

        return ans;
    }
    public static void main(String[] args)
    {
        String st = "TUF is great for interview preparation";
        System.out.println("Before reversing words: ");
        System.out.println(st);
        System.out.println("After reversing words: ");
        System.out.print(result(st));
    }

Q23) Find the largest odd number in String.
    public static String maxOdd(String s)
    {
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) % 2 != 0) {
                String s1 = s.substring(0, i + 1);
                return s1;
            }
        }
        return "";
    }
    public static void main(String[] args) {

        String s = "504";
        String ans = maxOdd(s);
        System.out.println(ans);
    }

Q24) Write a program for finding longest common prefix.
   public String longestCommonPrefix(String[] arr)
    {
        int n = arr.length;
        String result = arr[0];
        for(int i = 1; i < n; i++){
            while(arr[i].indexOf(result) != 0){
                result = result.substring(0, result.length()-1);
                if(result.isEmpty()){
                    return "-1";
                }
            }
        }
        return result;
    }

    public static void main(String[] args)
    {
        Strings gfg = new Strings();
        String[] input = {"geeksforgeeks", "geeks", "geek", "geezer"};
        System.out.println( "The longest Common Prefix is : " +
                gfg.longestCommonPrefix(input));
    }
  
Q25) Check if given strings are rotations of each other or not.
   static boolean areRotations(String str1, String str2) {
        return (str1.length() == str2.length())
                && ((str1 + str1).indexOf(str2) != -1);
    }
    public static void main(String[] args) {
        String str1 = "AACD";
        String str2 = "ACDA";
        if (areRotations(str1, str2))
            System.out.println(
                    "Strings are rotations of each other");
        else
            System.out.printf(
                    "Strings are not rotations of each other");
    }

Q26) Sum of Beauty of All Substrings.
     public int beautySum(String s) {
       int totalBeauty = 0; 
        int stringLength = s.length(); 
           for (int i = 0; i < stringLength; ++i) {
            int[] frequencyCount = new int[26];
            for (int j = i; j < stringLength; ++j) {
                ++frequencyCount[s.charAt(j) - 'a'];
                int minFrequency = 1000, maxFrequency = 0;
                for (int freq : frequencyCount) {
                    if (freq > 0) {
                        minFrequency = Math.min(minFrequency, freq);
                        maxFrequency = Math.max(maxFrequency, freq);
                    }
                }
             totalBeauty += maxFrequency - minFrequency;
            }
        }
       return totalBeauty;
}

Q27) Count number of substrings with exactly k distinct characters.
     int countkDist(String str, int k) {
        int res = 0;
        int n = str.length();
        boolean seen[] = new boolean[26];
        for (int i = 0; i < n; i++) {
            int distCount = 0;
            Arrays.fill(seen, false);
            for (int j=i; j<n; j++) {
                if (!seen[str.charAt(j) - 'a'])
                    distCount++;
                seen[str.charAt(j) - 'a'] = true;
                if (distCount == k)
                    res++;
            }
        }
        return res;
    }
    public static void main(String[] args) {
        Strings ob = new Strings();
        String ch = "abcbaa";
        int k = 3;
        System.out.println("Total substrings with exactly " +
                k +    " distinct characters : "
                + ob.countkDist(ch, k));
    }
        
Q28) Number of substrings of a string.
  static int countNonEmptySubstr(String str) {
        int n = str.length();
        return n * (n + 1) / 2;
    }

    public static void main(String args[]) {
        String s = "abcde";
        System.out.println(countNonEmptySubstr(s));

    }
