Q1) write the program of how an instance of a class (i.e an object ) of a class is created.
     class Student{ 
       String name; 
        String surname; 
       int rollNo; 
      Student(String studentName, String studentSurname, int studentRollNo){ 
       this.name= studentName; 
        this.surname = studentSurname; 
        this.rollNo= studentRollNo; 
     } 
    public void getStudentDetails(){ 
         System.out.println("The name of the student is "+ this.name +" "+ this.surname); 
         System.out.println("The roll no of the student is "+ this.rollNo); 
    } 
    } 
class OOPS{ 
      public static void main(String args[]) { 
        Student student1 = new Student("Vivek", "Yadav" , 20); 
         student1.getStudentDetails(); 
    } 
 }

Q2) Classes and Objects.
   public class OOps {
  public static void main(String[] args) {
    pen p1=new pen();
    p1.setColor("Blue");
    System.out.println(p1.color);
    p1.setTip(5);
    System.out.println(p1.tip);
    p1.setColor("Yellow");
    System.out.println(p1.color);
 class pen{
  String color;
  int tip;
  void setColor(String newColor){
    color=newColor;

  }
  void setTip(int newTip){

    tip= newTip;
  }
  }

Q3) Access Modifier.
public class OOps {
  public static void main(String[] args) {
 BankAccount myAcc =new BankAccount();
    myAcc.username ="somya";
    myAcc.setPassword ("abcdes");
  }
}
class BankAccount {
    public String username;
     private String password;
     public void setPassword(String pwd){
       password =pwd;
     }
  }
Q4) Getters and Setters.
  public class OOps {
  public static void main(String[] args) {
    pen p1=new pen();
    p1.setColor("Blue");
    System.out.println(p1.getColor());
    p1.setTip(5);
    System.out.println(p1.getTip());
    p1.setColor("Yellow");
    System.out.println(p1.getColor());
}
}
class pen{
 private String color;
   private int tip;
  String getColor(){
    return this.color;
  }
  int getTip(){
    return this.tip;
  }
  void setColor(String newColor){
    this.color=newColor;
 }
  void setTip(int Tip){

    this.tip=Tip;
  }
  }

Q5) Constructors.
   public class OOps {
  public static void main(String[] args) {
Student s1 =new Student("Somya");
      System.out.println(s1.name);
  }
}
class Student{
    String name;
    int roll;
   Student(String name){
      this.name =name;
    }
}

Q6) Types of constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
    Student s2= new Student("Somya");
    Student s3 =new Student(123);
  }
}
class Student {
    String name;
    int roll;

    Student() {
        System.out.println("constructor is called.....");
    }

    Student(String name) {
        this.name = name;
    }

    Student(int roll) {
        this.roll = roll;
    }
}

Q7) Copy constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
   s1.name ="Somya";
   s1.roll =456;
   s1.password ="abcd";
      s1.marks[0]=100;
      s1.marks[1]=90;
      s1.marks[2]=80;

   Student s2 =new Student(s1);
   s2.password ="xyz";
   s1.marks[2]=100;
   for(int i=0;i<3;i++){
    System.out.println(s2.marks[i]);
}
}
}
      class Student {
    String name;
    int roll;
    String password;
    int marks[];
    Student(Student s1){
        this.name =s1.name;
        this.roll =s1.roll;
        this.marks =s1.marks;
    }
    Student() {
        marks =new int[3];
        System.out.println("constructor is called.....");
    }
   Student(String name) {
        marks =new int[3];
        this.name = name;
    }
   Student(int roll) {
        marks =new int[3];
        this.roll = roll;
    }
}

Q8) Deep copy constructors.
public class OOps {
  public static void main(String[] args) {
Student s1 =new Student();
   s1.name ="Somya";
   s1.roll =456;
   s1.password ="abcd";
      s1.marks[0]=100;
      s1.marks[1]=90;
      s1.marks[2]=80;
Student s2 =new Student(s1);
   s2.password ="xyz";
   s1.marks[2]=100;
   for(int i=0;i<3;i++){
    System.out.println(s2.marks[i]);
}
 }
}
      class Student {
    String name;
    int roll;
    String password;
    int marks[];
Student(Student s1) {
        marks = new int[3];
        this.name = s1.name;
        this.roll = s1.roll;
        for (int i = 0; i < marks.length; i++) {
            this.marks[i] = s1.marks[i];
}
    }

        Student(){
            marks=new int[3];
            System.out.println("constructor is called.....");
        }
    Student(String name) {
        marks =new int[3];
        this.name = name;
    }
 Student(int roll) {
        marks =new int[3];
        this.roll = roll;
    }
}

Q9) Inheritance.
public class OOps {
public static void main(String[] args) {
  fish shark =new fish();
  shark.eat();
}
}
   //Base class
  class Animal{
    String color;
    void eat(){
        System.out.println("eats");
    }
    void breathe(){
        System.out.println("breathes");
    }
  }
    //Derived class
   class fish extends Animal {
    int fins;
    void swim(){
        System.out.println("swims in water");
    }
    }
